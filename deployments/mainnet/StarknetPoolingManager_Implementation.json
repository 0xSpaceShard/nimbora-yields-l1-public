{
  "address": "0xa4B2066d4B6A7E7dBDF298babBA3188A0759D3b8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPoolingManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "BridgeCancelDepositRequestClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "CancelDepositRequestBridgeSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "processed",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct PoolingManagerBase.StrategyReport[]",
          "name": "reports",
          "type": "tuple[]"
        }
      ],
      "name": "ReportHandled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "cancelDepositRequestBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "claimBridgeCancelDepositRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolingManagerBase.BridgeData[]",
          "name": "_bridgeWithdrawInfo",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "processed",
              "type": "bool"
            }
          ],
          "internalType": "struct PoolingManagerBase.StrategyReport[]",
          "name": "_strategyReport",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolingManagerBase.BridgeData[]",
          "name": "_bridgeDepositInfo",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_l2BridgeEthFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_l2MessagingEthFee",
          "type": "uint256"
        }
      ],
      "name": "handleReport",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolingManagerBase.BridgeData[]",
          "name": "_bridgeWithdrawInfo",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l1Strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "processed",
              "type": "bool"
            }
          ],
          "internalType": "struct PoolingManagerBase.StrategyReport[]",
          "name": "_strategyReport",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "bridge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolingManagerBase.BridgeData[]",
          "name": "_bridgeDepositInfo",
          "type": "tuple[]"
        }
      ],
      "name": "hashFromReport",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2PoolingManager",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_starknetCore",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethBridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wETH",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2PoolingManager",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "registerStrategy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "starknetCore",
      "outputs": [
        {
          "internalType": "contract IStarknetMessaging",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1249223c8b31479f7d377bbb4ff21d6c81816730d407e882c2f764ea320d7c66",
  "receipt": {
    "to": null,
    "from": "0x46c1e48B26D1B35b63B1e852CF34BEE589184557",
    "contractAddress": "0xa4B2066d4B6A7E7dBDF298babBA3188A0759D3b8",
    "transactionIndex": 48,
    "gasUsed": "2336857",
    "logsBloom": "0x
    "blockHash": "0xafaffd1c3f131a94aac97b4cb454c84d8c272edc210af7d93ca5505bc913271e",
    "transactionHash": "0x1249223c8b31479f7d377bbb4ff21d6c81816730d407e882c2f764ea320d7c66",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 19154157,
        "transactionHash": "0x1249223c8b31479f7d377bbb4ff21d6c81816730d407e882c2f764ea320d7c66",
        "address": "0xa4B2066d4B6A7E7dBDF298babBA3188A0759D3b8",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 130,
        "blockHash": "0xafaffd1c3f131a94aac97b4cb454c84d8c272edc210af7d93ca5505bc913271e"
      }
    ],
    "blockNumber": 19154157,
    "cumulativeGasUsed": "6493290",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d80d4dacbeef6bcba89873267451e4b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolingManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"BridgeCancelDepositRequestClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"CancelDepositRequestBridgeSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct PoolingManagerBase.StrategyReport[]\",\"name\":\"reports\",\"type\":\"tuple[]\"}],\"name\":\"ReportHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"cancelDepositRequestBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"claimBridgeCancelDepositRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolingManagerBase.BridgeData[]\",\"name\":\"_bridgeWithdrawInfo\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"}],\"internalType\":\"struct PoolingManagerBase.StrategyReport[]\",\"name\":\"_strategyReport\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolingManagerBase.BridgeData[]\",\"name\":\"_bridgeDepositInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_l2BridgeEthFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2MessagingEthFee\",\"type\":\"uint256\"}],\"name\":\"handleReport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolingManagerBase.BridgeData[]\",\"name\":\"_bridgeWithdrawInfo\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"}],\"internalType\":\"struct PoolingManagerBase.StrategyReport[]\",\"name\":\"_strategyReport\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolingManagerBase.BridgeData[]\",\"name\":\"_bridgeDepositInfo\",\"type\":\"tuple[]\"}],\"name\":\"hashFromReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2PoolingManager\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_starknetCore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2PoolingManager\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"registerStrategy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starknetCore\",\"outputs\":[{\"internalType\":\"contract IStarknetMessaging\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"@nimbora 2024\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"BridgeCancelDepositRequestClaimed(address,uint256,uint256)\":{\"params\":{\"amount\":\"the amount to claim from the bridge.\",\"bridge\":\"the bridge address.\",\"nonce\":\"the deposit nonce.\"}},\"CancelDepositRequestBridgeSent(address,uint256,uint256)\":{\"params\":{\"amount\":\"the amount to claim from the bridge.\",\"bridge\":\"the bridge address.\",\"nonce\":\"the deposit nonce.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ReportHandled(uint256,(address,uint256,uint256,bool)[])\":{\"params\":{\"epoch\":\"the report epoch.\",\"reports\":\"the list of  strategies updated.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"StrategyRegistered(address)\":{\"params\":{\"strategy\":\"the strategy address.\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"cancelDepositRequestBridge(address,uint256,uint256)\":{\"details\":\"Cancel the deposited tokens when they get stuck. If the fees paid to bridge the tokens are not enough to incentive the sequencer it's possible that the tokens will stay blocked. By calling this function the admin can claim back the tokens.\",\"params\":{\"_amount\":\"the amount deposited.\",\"_bridge\":\"the bridge address.\",\"_nonce\":\"the nonce of the deposit.\"}},\"claimBridgeCancelDepositRequest(address,address,uint256,uint256)\":{\"details\":\"After calling the 'cancelDepositRequestBridge' the tokens are available after 7days, as this time is too long the admin will send the tokens to L2 and claim back the blocked tokens when they are released by calling this func.\",\"params\":{\"_amount\":\"the amount deposited.\",\"_bridge\":\"the bridge address.\",\"_nonce\":\"the nonce of the deposit.\",\"_token\":\"the token address.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"handleReport(uint256,(address,uint256)[],(address,uint256,uint256,bool)[],(address,uint256)[],uint256,uint256)\":{\"params\":{\"_bridgeDepositInfo\":\"a list of {bridgeAddress,amount} to deposit into the bridges, those values are computed on L2.\",\"_bridgeWithdrawInfo\":\"a list of {bridgeAddress,amount} to withdraw from the bridges.\",\"_epoch\":\"the epoch of the report.\",\"_l2BridgeEthFee\":\"the fees to pay for briding tokens to L2.\",\"_l2MessagingEthFee\":\"the fees to pay for briding message to L2.\",\"_strategyReport\":\"the strategy to apply, can be DEPOSIT, WITHDRAW, UPDATE.\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hashFromReport(uint256,(address,uint256)[],(address,uint256,uint256,bool)[],(address,uint256)[])\":{\"details\":\"Generates a hash from a strategy report and bridge interaction information, used for data verification and integrity checks.\"},\"initialize(address,uint256,address,address,address,address)\":{\"params\":{\"_admin\":\"the admin address.\",\"_ethBridge\":\"the eth bridge address.\",\"_l2PoolingManager\":\"the l2 pooling manager address.\",\"_relayer\":\"the relayer address.\",\"_starknetCore\":\"the Starknet core contract, used to bridge messages.\",\"_wETH\":\"the weth address.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"registerStrategy(address)\":{\"params\":{\"_strategy\":\"the strategy address.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"Starknet Pooling manager contract.\",\"version\":1},\"userdoc\":{\"events\":{\"BridgeCancelDepositRequestClaimed(address,uint256,uint256)\":{\"notice\":\"Emitted when the func 'cancelDepositRequestBridge' is called\"},\"CancelDepositRequestBridgeSent(address,uint256,uint256)\":{\"notice\":\"Emitted when the func 'cancelDepositRequestBridge' is called\"},\"ReportHandled(uint256,(address,uint256,uint256,bool)[])\":{\"notice\":\"Emitted when a report is handled.\"},\"StrategyRegistered(address)\":{\"notice\":\"Emitted when a strategy is registred.\"}},\"kind\":\"user\",\"methods\":{\"RELAYER_ROLE()\":{\"notice\":\"Relayer role.\"},\"ethBridge()\":{\"notice\":\"ethBridge address.\"},\"handleReport(uint256,(address,uint256)[],(address,uint256,uint256,bool)[],(address,uint256)[],uint256,uint256)\":{\"notice\":\"Handle a report.\"},\"initialize(address,uint256,address,address,address,address)\":{\"notice\":\"Initialize the Starknet pooling manager contract.\"},\"l2PoolingManager()\":{\"notice\":\"The L2 Pooling manager address.\"},\"registerStrategy(address)\":{\"notice\":\"List a new strategy.\"},\"starknetCore()\":{\"notice\":\"Starknet messaging interface.\"},\"wETH()\":{\"notice\":\"wETH address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/poolingManager/Implementation/StarknetPoolingManager.sol\":\"StarknetPoolingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/interfaces/IStarknetBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice Starknet bridge interface\\ninterface IStarknetBridge {\\n    function deposit(uint256 amount, uint256 l2Recipient) external payable;\\n\\n    function withdraw(uint256 amount, address recipient) external;\\n\\n    function depositCancelRequest(uint256 amount, uint256 l2Recipient, uint256 nonce) external;\\n\\n    function depositReclaim(uint256 amount, uint256 l2Recipient, uint256 nonce) external;\\n}\\n\",\"keccak256\":\"0xa6e7605269ea6e2276a8aef974a3901c87e41ae0cf4e4e639431febbd611e0f6\",\"license\":\"MIT\"},\"contracts/interfaces/IStarknetMessaging.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice Starknet messaging interface\\ninterface IStarknetMessaging {\\n    function consumeMessageFromL2(uint256 fromAddress, uint256[] calldata payload) external returns (bytes32);\\n\\n    function sendMessageToL2(\\n        uint256 toAddress,\\n        uint256 selector,\\n        uint256[] calldata payload\\n    ) external payable returns (bytes32, uint256);\\n\\n    function l2ToL1Messages(bytes32 msgHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31d569b708b7bad3d86244190cf7a0e894f8bc711323b1efb28c34de9b7cd9d3\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice StrategyBase interface\\ninterface IStrategyBase {\\n    function depositCalldata(uint256 _amount) external view returns (address, bytes memory);\\n\\n    function addressToApprove() external view returns (address);\\n\\n    function withdraw(uint256 _amount) external returns (uint256);\\n\\n    function nav() external view returns (uint256);\\n\\n    function yieldToUnderlying(uint256 amount) external view returns (uint256);\\n\\n    function underlyingToYield(uint256 amount) external view returns (uint256);\\n\\n    function yieldBalance() external view returns (uint256);\\n\\n    function poolingManager() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n\\n    function yieldToken() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n}\\n\",\"keccak256\":\"0x334306fa65f8c05752f24453f7f030bb46dfe6cfd43e3d469589a3daa04603ca\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0x48806aeb904aa8ac7ac9702a4712ff60a4d8871e4ed5f24a46d0b3ce9113ba51\",\"license\":\"MIT\"},\"contracts/lib/ErrorLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.8.20;\\n\\nlibrary ErrorLib {\\n    error CallerIsNotPoolingManager();\\n    error CallerIsNotAdmin();\\n    error InvalidPoolingManager();\\n    error NotPoolingManager();\\n    error InvalidUnderlyingToken();\\n    error PoolNotExist();\\n    error InvalidSlippage();\\n    error ErrorStrategyNotExist(address strategy);\\n    error ErrorBeforeProcessStrategy(address strategy);\\n    error ErrorDepositStrategy(address strategy);\\n    error ErrorWithdrawStrategy(address strategy);\\n    error ErrorAfterWithdrawStrategy(address strategy);\\n}\\n\",\"keccak256\":\"0x8625a96da9c06953e375c3747e4664819a1c177d16b7c11de4cc750a7b57daac\",\"license\":\"Apache-2.0.\"},\"contracts/lib/StarknetMessaging.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IStarknetMessaging} from \\\"../interfaces/IStarknetMessaging.sol\\\";\\nimport {IStarknetBridge} from \\\"../interfaces/IStarknetBridge.sol\\\";\\n\\n/// @title Messaging contract.\\n/// @author Spaceshard team 2023.\\ncontract StarknetMessaging {\\n    uint256 private constant UINT256_PART_SIZE_BITS = 128;\\n    uint256 private constant UINT256_PART_SIZE = 2 ** UINT256_PART_SIZE_BITS;\\n\\n    /// @notice Starknet messaging interface.\\n    IStarknetMessaging public starknetCore;\\n\\n    /// @notice initialize the trove handler.\\n    /// @param _starknetCore Starknet core interface.\\n    function __messaging_init(address _starknetCore) internal {\\n        starknetCore = IStarknetMessaging(_starknetCore);\\n    }\\n\\n    /// @notice Consume l2 message.\\n    function _consumeL2Message(uint256 l2ContractAddress, uint256[] memory data) internal {\\n        starknetCore.consumeMessageFromL2(l2ContractAddress, data);\\n    }\\n\\n    /// @notice Withdraw tokens from Starkgate bridge.\\n    function _withdrawTokenFromBridge(address l1BridgeAddress, address _receiver, uint256 _amount) internal {\\n        IStarknetBridge(l1BridgeAddress).withdraw(_amount, _receiver);\\n    }\\n\\n    /// @notice deposit tokens to Starknet bridge.\\n    function depositToBridgeToken(\\n        address l1BridgeAddress,\\n        uint256 _l2Receiver,\\n        uint256 _amount,\\n        uint256 _value\\n    ) internal {\\n        if (_amount > 0) {\\n            IStarknetBridge(l1BridgeAddress).deposit{value: _value}(_amount, _l2Receiver);\\n        }\\n    }\\n\\n    /// @notice cancel deposit tokens to Starknet bridge.\\n    function depositCancelRequestToBridgeToken(\\n        address l1BridgeAddress,\\n        uint256 _l2Receiver,\\n        uint256 _amount,\\n        uint256 _nonce\\n    ) internal {\\n        if (_amount > 0) {\\n            IStarknetBridge(l1BridgeAddress).depositCancelRequest(_amount, _l2Receiver, _nonce);\\n        }\\n    }\\n\\n    /// @notice cancel deposit tokens to Starknet bridge.\\n    function depositReclaimToBridgeToken(\\n        address l1BridgeAddress,\\n        uint256 _l2Receiver,\\n        uint256 _amount,\\n        uint256 _nonce\\n    ) internal {\\n        if (_amount > 0) {\\n            IStarknetBridge(l1BridgeAddress).depositReclaim(_amount, _l2Receiver, _nonce);\\n        }\\n    }\\n\\n    /// @notice send message to l2.\\n    function _sendMessageToL2(\\n        uint256 _l2Contract,\\n        uint256 _selector,\\n        uint256[] memory payload,\\n        uint256 _value\\n    ) internal {\\n        starknetCore.sendMessageToL2{value: _value}(_l2Contract, _selector, payload);\\n    }\\n\\n    function u256(uint256 _value) internal pure returns (uint256 low, uint256 high) {\\n        low = _value & (UINT256_PART_SIZE - 1);\\n        high = _value >> UINT256_PART_SIZE_BITS;\\n    }\\n}\\n\",\"keccak256\":\"0x97bfdcc8f2ad248422dbe63240f121e2498ad0cd5ccd5adb2b8eb22e59a39c11\",\"license\":\"MIT\"},\"contracts/poolingManager/Implementation/StarknetPoolingManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {StarknetMessaging} from \\\"../../lib/StarknetMessaging.sol\\\";\\nimport {PoolingManagerBase} from \\\"../PoolingManagerBase.sol\\\";\\n\\n/// @title Starknet Pooling manager contract.\\n/// @author @nimbora 2024\\ncontract StarknetPoolingManager is StarknetMessaging, PoolingManagerBase {\\n    /// @notice Emitted when the func 'cancelDepositRequestBridge' is called\\n    /// @param bridge the bridge address.\\n    /// @param amount the amount to claim from the bridge.\\n    /// @param nonce the deposit nonce.\\n    event BridgeCancelDepositRequestClaimed(address bridge, uint256 amount, uint256 nonce);\\n\\n    /// @notice Emitted when the func 'cancelDepositRequestBridge' is called\\n    /// @param bridge the bridge address.\\n    /// @param amount the amount to claim from the bridge.\\n    /// @param nonce the deposit nonce.\\n    event CancelDepositRequestBridgeSent(address bridge, uint256 amount, uint256 nonce);\\n\\n    /// @notice The L2 Pooling manager address.\\n    uint256 public l2PoolingManager;\\n\\n    /// @notice The L2 function selector that is called by the sequencer when the message is sent to the L2 Pooling manager.\\n    uint256 private constant L2_HANDLER_SELECTOR = 0x10e13e50cb99b6b3c8270ec6e16acfccbe1164a629d74b43549567a77593aff;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @notice Initialize the Starknet pooling manager contract.\\n    /// @param _admin the admin address.\\n    /// @param _l2PoolingManager the l2 pooling manager address.\\n    /// @param _starknetCore the Starknet core contract, used to bridge messages.\\n    /// @param _relayer the relayer address.\\n    /// @param _ethBridge the eth bridge address.\\n    /// @param _wETH the weth address.\\n    function initialize(\\n        address _admin,\\n        uint256 _l2PoolingManager,\\n        address _starknetCore,\\n        address _relayer,\\n        address _ethBridge,\\n        address _wETH\\n    ) external initializer {\\n        __messaging_init(_starknetCore);\\n        __poolingManagerBase_init(_admin, _relayer, _ethBridge, _wETH);\\n\\n        l2PoolingManager = _l2PoolingManager;\\n    }\\n\\n    /// @dev Cancel the deposited tokens when they get stuck. If the fees paid to bridge the tokens are not enough to incentive the sequencer\\n    /// it's possible that the tokens will stay blocked. By calling this function the admin can claim back the tokens.\\n    /// @param _bridge the bridge address.\\n    /// @param _amount the amount deposited.\\n    /// @param _nonce the nonce of the deposit.\\n    function cancelDepositRequestBridge(\\n        address _bridge,\\n        uint256 _amount,\\n        uint256 _nonce\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        depositCancelRequestToBridgeToken(_bridge, l2PoolingManager, _amount, _nonce);\\n        emit CancelDepositRequestBridgeSent(_bridge, _amount, _nonce);\\n    }\\n\\n    /// @dev After calling the 'cancelDepositRequestBridge' the tokens are available after 7days, as this time is too long\\n    /// the admin will send the tokens to L2 and claim back the blocked tokens when they are released by calling this func.\\n    /// @param _bridge the bridge address.\\n    /// @param _token the token address.\\n    /// @param _amount the amount deposited.\\n    /// @param _nonce the nonce of the deposit.\\n    function claimBridgeCancelDepositRequest(\\n        address _bridge,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _nonce\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        depositReclaimToBridgeToken(_bridge, l2PoolingManager, _amount, _nonce);\\n        if (_bridge == ethBridge) {\\n            payable(msg.sender).transfer(_amount);\\n        } else {\\n            IERC20(_token).transfer(msg.sender, _amount);\\n        }\\n        emit BridgeCancelDepositRequestClaimed(_bridge, _amount, _nonce);\\n    }\\n\\n    /// @inheritdoc\\tPoolingManagerBase\\n    function _withdrawTokenFromBridgeL2(address _bridge, uint256 _amount) internal override {\\n        _withdrawTokenFromBridge(_bridge, address(this), _amount);\\n    }\\n\\n    /// @inheritdoc\\tPoolingManagerBase\\n    function _depositTokenToBridgeL2(address _bridge, uint256 _amount, uint256 _value) internal override {\\n        depositToBridgeToken(_bridge, l2PoolingManager, _amount, _value);\\n    }\\n\\n    /// @inheritdoc\\tPoolingManagerBase\\n    function _verifyL2Calldata(uint256 _dataHash) internal override {\\n        _consumeL2Message(l2PoolingManager, _getMessagePayloadData(0, _dataHash));\\n    }\\n\\n    /// @inheritdoc\\tPoolingManagerBase\\n    function _sendMessageL2(uint256 _epoch, uint256 _dataHash, uint256 _fees) internal override {\\n        _sendMessageToL2(l2PoolingManager, L2_HANDLER_SELECTOR, _getMessagePayloadData(_epoch, _dataHash), _fees);\\n    }\\n\\n    /// @dev hash Starknet message payload.\\n    function _getMessagePayloadData(uint256 _epoch, uint256 _dataHash) internal pure returns (uint256[] memory) {\\n        uint256[] memory data;\\n        (uint256 lowHash, uint256 highHash) = u256(_dataHash);\\n        if (_epoch == 0) {\\n            data = new uint256[](2);\\n            data[0] = lowHash;\\n            data[1] = highHash;\\n        } else {\\n            (uint256 lowEpoch, uint256 highEpoch) = u256(_epoch);\\n            data = new uint256[](4);\\n            data[0] = lowEpoch;\\n            data[1] = highEpoch;\\n            data[2] = lowHash;\\n            data[3] = highHash;\\n        }\\n        return (data);\\n    }\\n}\\n\",\"keccak256\":\"0x4abf0e02a77692a771ce3ad744d827f7c20b7b0dcac42bc72e9d870dfc4da6a3\",\"license\":\"Apache-2.0.\"},\"contracts/poolingManager/PoolingManagerBase.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0.\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {ErrorLib} from \\\"../lib/ErrorLib.sol\\\";\\nimport {IStrategyBase} from \\\"../interfaces/IStrategyBase.sol\\\";\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\n\\n/// @title The PoolingManagerBase\\n/// @author @nimbora 2024\\nabstract contract PoolingManagerBase is UUPSUpgradeable, AccessControlUpgradeable {\\n    /// @notice The startegy action.\\n    enum Action {\\n        DEPOSIT,\\n        UPDATE,\\n        WITHDRAW\\n    }\\n\\n    /// @notice The bridge data used to interact with L2 bridges.\\n    /// @param bridge the bridge address\\n    /// @param amount the bridge address\\n    struct BridgeData {\\n        address bridge;\\n        uint256 amount;\\n    }\\n\\n    /// @notice The bridge data used to interact with L2 bridges.\\n    /// @param l1Strategy the strategy address.\\n    /// @param data the data, it can be l1 net asset value (nav) or the action.\\n    /// @param amount the amount to deposit/withdraw from the strategy.\\n    /// @param processed return the status of the strategy if it was processed on L1 or not.\\n    struct StrategyReport {\\n        address l1Strategy;\\n        uint256 data;\\n        uint256 amount;\\n        bool processed;\\n    }\\n\\n    /// @notice Emitted when a report is handled.\\n    /// @param epoch the report epoch.\\n    /// @param reports the list of  strategies updated.\\n    event ReportHandled(uint256 epoch, StrategyReport[] reports);\\n\\n    /// @notice Emitted when a strategy is registred.\\n    /// @param strategy the strategy address.\\n    event StrategyRegistered(address strategy);\\n\\n    /// @notice Relayer role.\\n    bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n\\n    /// @notice ethBridge address.\\n    address public ethBridge;\\n\\n    /// @notice wETH address.\\n    address public wETH;\\n\\n    /// @notice Initialize the base pooling manager.\\n    /// @param _admin the admin address.\\n    /// @param _relayer the relayer address.\\n    /// @param _ethBridge the eth bridge address.\\n    function __poolingManagerBase_init(\\n        address _admin,\\n        address _relayer,\\n        address _ethBridge,\\n        address _wETH\\n    ) internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(RELAYER_ROLE, _relayer);\\n        ethBridge = _ethBridge;\\n        wETH = _wETH;\\n    }\\n\\n    /// @dev Verifies the L2 calldata hash to ensure it matches the expected value. This is a security measure to ensure data integrity between L1 and L2.\\n    function _verifyL2Calldata(uint256 _dataHash) internal virtual;\\n\\n    /// @dev Sends a message to L2, including necessary data and fees. This function is part of the cross-layer communication process.\\n    function _sendMessageL2(uint256 _epoch, uint256 _dataHash, uint256 _fees) internal virtual;\\n\\n    /// @dev Withdraws a specified token amount from a given bridge. This is a lower-level function used by '_withdrawFromBridges'.\\n    function _withdrawTokenFromBridgeL2(address _bridge, uint256 _amount) internal virtual;\\n\\n    /// @dev Deposits a specified token amount to a given bridge, including the handling of Ether conversions if necessary.\\n    function _depositTokenToBridgeL2(address _bridge, uint256 _amount, uint256 _value) internal virtual;\\n\\n    /// @dev Authorizes an upgrade to a new contract implementation, ensuring that only an authorized role can perform the upgrade.\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    /// @notice List a new strategy.\\n    /// @param _strategy the strategy address.\\n    function registerStrategy(address _strategy) external payable onlyRole(DEFAULT_ADMIN_ROLE) {\\n        IStrategyBase strategy = IStrategyBase(_strategy);\\n        if (strategy.poolingManager() != address(this)) revert ErrorLib.InvalidPoolingManager();\\n        address underlying = IStrategyBase(_strategy).underlyingToken();\\n        IERC20(underlying).approve(strategy.bridge(), type(uint256).max);\\n        IERC20(underlying).approve(strategy.addressToApprove(), type(uint256).max);\\n\\n        emit StrategyRegistered(_strategy);\\n    }\\n\\n    /// @notice Handle a report.\\n    /// @param _epoch the epoch of the report.\\n    /// @param _bridgeWithdrawInfo a list of {bridgeAddress,amount} to withdraw from the bridges.\\n    /// @param _strategyReport the strategy to apply, can be DEPOSIT, WITHDRAW, UPDATE.\\n    /// @param _bridgeDepositInfo a list of {bridgeAddress,amount} to deposit into the bridges, those values are computed on L2.\\n    /// @param _l2BridgeEthFee the fees to pay for briding tokens to L2.\\n    /// @param _l2MessagingEthFee the fees to pay for briding message to L2.\\n    function handleReport(\\n        uint256 _epoch,\\n        BridgeData[] memory _bridgeWithdrawInfo,\\n        StrategyReport[] memory _strategyReport,\\n        BridgeData[] memory _bridgeDepositInfo,\\n        uint256 _l2BridgeEthFee,\\n        uint256 _l2MessagingEthFee\\n    ) external payable onlyRole(RELAYER_ROLE) returns (bool) {\\n        _verifyL2Calldata(hashFromReport(_epoch, _bridgeWithdrawInfo, _strategyReport, _bridgeDepositInfo));\\n        _withdrawFromBridges(_bridgeWithdrawInfo);\\n        bool processed = _handleReport(_strategyReport, _bridgeDepositInfo);\\n        _depositToBridges(_bridgeDepositInfo, _l2BridgeEthFee);\\n        BridgeData[] memory emptyBridgeInfo = new BridgeData[](0);\\n        _sendMessageL2(\\n            _epoch,\\n            hashFromReport(0, emptyBridgeInfo, _strategyReport, emptyBridgeInfo),\\n            _l2MessagingEthFee\\n        );\\n        emit ReportHandled(_epoch, _strategyReport);\\n        return processed;\\n    }\\n\\n    /// @dev Handles the withdrawal of funds from various bridges. It iterates over bridge withdrawal info and performs each withdrawal.\\n    function _withdrawFromBridges(BridgeData[] memory _bridgeWithdrawalInfo) internal {\\n        for (uint256 i = 0; i < _bridgeWithdrawalInfo.length; ) {\\n            _withdrawTokenFromBridgeL2(_bridgeWithdrawalInfo[i].bridge, _bridgeWithdrawalInfo[i].amount);\\n            if (_bridgeWithdrawalInfo[i].bridge == ethBridge) {\\n                IWETH(wETH).deposit{value: _bridgeWithdrawalInfo[i].amount}();\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @dev Deposits funds to bridges as part of the bridging process. This function handles both Ether and token deposits.\\n    function _depositToBridges(BridgeData[] memory _bridgeDepositInfo, uint256 _l2BridgeEthFee) internal {\\n        for (uint256 i = 0; i < _bridgeDepositInfo.length; ) {\\n            BridgeData memory BridgeDataElem = _bridgeDepositInfo[i];\\n            bool isETH = BridgeDataElem.bridge == ethBridge;\\n            if (isETH) {\\n                IWETH(wETH).withdraw(BridgeDataElem.amount);\\n            }\\n            uint256 value = isETH ? BridgeDataElem.amount + _l2BridgeEthFee : _l2BridgeEthFee;\\n            _depositTokenToBridgeL2(BridgeDataElem.bridge, BridgeDataElem.amount, value);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @dev Process strategy reports from L2, handling each report based on its type (deposit, withdrawal, etc.) and updates the state accordingly.\\n    function _handleReport(StrategyReport[] memory _report, BridgeData[] memory _bridgeData) private returns (bool) {\\n        bool allStrategiesProcessed = true;\\n        for (uint256 i = 0; i < _report.length; ) {\\n            StrategyReport memory strategyReport = _report[i];\\n            address strategy = strategyReport.l1Strategy;\\n            uint256 action = strategyReport.data;\\n            uint256 amountIn = strategyReport.amount;\\n\\n            IStrategyBase l1Strategy = IStrategyBase(strategy);\\n            uint256 amount = 0;\\n            bool processed = true;\\n            if (action == uint256(Action.DEPOSIT)) {\\n                (address target, bytes memory cdata) = l1Strategy.depositCalldata(amountIn);\\n                (bool success, ) = target.call(cdata);\\n                if (!success) {\\n                    processed = false;\\n                    allStrategiesProcessed = false;\\n                }\\n            } else if (action == uint256(Action.WITHDRAW)) {\\n                try l1Strategy.withdraw(amountIn) returns (uint256 amountw) {\\n                    amount = amountw;\\n                    if (amount != amountIn) {\\n                        _updateBridgeDeposits(amountIn - amount, l1Strategy.bridge(), _bridgeData);\\n                    }\\n                } catch {\\n                    processed = false;\\n                    allStrategiesProcessed = false;\\n                    _updateBridgeDeposits(amountIn, l1Strategy.bridge(), _bridgeData);\\n                }\\n            }\\n\\n            _report[i] = StrategyReport({\\n                l1Strategy: address(l1Strategy),\\n                data: l1Strategy.nav(),\\n                amount: amount,\\n                processed: processed\\n            });\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return allStrategiesProcessed;\\n    }\\n\\n    /// @dev When the output amount returned by a strategy is not the expected value, the bridged amount is updated.\\n    function _updateBridgeDeposits(\\n        uint256 _amount,\\n        address _bridge,\\n        BridgeData[] memory _bridgeDepositInfos\\n    ) internal pure {\\n        for (uint256 i = 0; i < _bridgeDepositInfos.length; ) {\\n            BridgeData memory bridgeDepositInfoElem = _bridgeDepositInfos[i];\\n            if (bridgeDepositInfoElem.bridge == _bridge) {\\n                _bridgeDepositInfos[i].amount -= _amount;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @dev Generates a hash from a strategy report and bridge interaction information, used for data verification and integrity checks.\\n    function hashFromReport(\\n        uint256 _epoch,\\n        BridgeData[] memory _bridgeWithdrawInfo,\\n        StrategyReport[] memory _strategyReport,\\n        BridgeData[] memory _bridgeDepositInfo\\n    ) public pure returns (uint256) {\\n        bytes memory encodedData = _epoch != 0 ? abi.encodePacked(_epoch) : abi.encodePacked();\\n\\n        for (uint256 i = 0; i < _bridgeWithdrawInfo.length; ) {\\n            encodedData = abi.encodePacked(\\n                encodedData,\\n                uint256(uint160(_bridgeWithdrawInfo[i].bridge)),\\n                _bridgeWithdrawInfo[i].amount\\n            );\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _strategyReport.length; ) {\\n            encodedData = abi.encodePacked(\\n                encodedData,\\n                uint256(uint160(_strategyReport[i].l1Strategy)),\\n                _strategyReport[i].data,\\n                _strategyReport[i].amount\\n            );\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _bridgeDepositInfo.length; ) {\\n            encodedData = abi.encodePacked(\\n                encodedData,\\n                uint256(uint160(_bridgeDepositInfo[i].bridge)),\\n                _bridgeDepositInfo[i].amount\\n            );\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return uint256(keccak256(encodedData));\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xde37a1511c6168f6aa4b1c141a066947239a5252c19a4839432edf06f1c7974c\",\"license\":\"Apache-2.0.\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b507ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff1615906001600160401b0316600081158015620000615750825b90506000826001600160401b031660011480156200007e5750303b155b9050811580156200008d575080155b15620000ac5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315620000db57845460ff60401b1916680100000000000000001785555b83156200012257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050506080516128ce62000151600039600081816114d2015281816114fb015261164601526128ce6000f3fe6080604052600436106101225760003560e01c80638201801a116100a5578063a2dc2ab71161006c578063a2dc2ab714610320578063ad3cb1cc14610340578063b39941911461037e578063d547741f1461039e578063f2428621146103be578063f5c2c430146103de57005b80638201801a146102775780638f3281a41461029757806391d14854146102b7578063926d7d7f146102d7578063a217fddf1461030b57005b806339e730ab116100e957806339e730ab146101e15780634f1ef2861461021957806352d1902d1461022c5780635f1b6bee146102415780636e9cfef11461026157005b806301f9df0b1461012b57806301ffc9a714610153578063248a9ca3146101735780632f2ff15d146101a157806336568abe146101c157005b3661012957005b005b61013e6101393660046120ec565b6103f1565b60405190151581526020015b60405180910390f35b34801561015f57600080fd5b5061013e61016e36600461218f565b6104ef565b34801561017f57600080fd5b5061019361018e3660046121b9565b610526565b60405190815260200161014a565b3480156101ad57600080fd5b506101296101bc3660046121d2565b610548565b3480156101cd57600080fd5b506101296101dc3660046121d2565b61056a565b3480156101ed57600080fd5b50600054610201906001600160a01b031681565b6040516001600160a01b03909116815260200161014a565b610129610227366004612229565b6105a2565b34801561023857600080fd5b506101936105c1565b34801561024d57600080fd5b5061012961025c3660046122b6565b6105de565b34801561026d57600080fd5b5061019360035481565b34801561028357600080fd5b506101296102923660046122fc565b610704565b3480156102a357600080fd5b50600154610201906001600160a01b031681565b3480156102c357600080fd5b5061013e6102d23660046121d2565b61076e565b3480156102e357600080fd5b506101937fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b34801561031757600080fd5b50610193600081565b34801561032c57600080fd5b5061012961033b366004612331565b6107a6565b34801561034c57600080fd5b50610371604051806040016040528060058152602001640352e302e360dc1b81525081565b60405161014a91906123ce565b34801561038a57600080fd5b50610193610399366004612401565b6108dc565b3480156103aa57600080fd5b506101296103b93660046121d2565b610ac6565b3480156103ca57600080fd5b50600254610201906001600160a01b031681565b6101296103ec366004612492565b610ae2565b60007fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc461041d81610dec565b61043161042c898989896108dc565b610df9565b61043a87610e0f565b60006104468787610f1e565b90506104528686611281565b604080516000808252602082019092528161048f565b60408051808201909152600080825260208201528152602001906001900390816104685790505b5090506104a98a6104a36000848c866108dc565b8761136f565b7f640622c00eb8dd98d3184ad993595f70972d855fe160e4a6291b7a0bf04d33928a896040516104da9291906124af565b60405180910390a15098975050505050505050565b60006001600160e01b03198216637965db0b60e01b148061052057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000908152600080516020612879833981519152602052604090206001015490565b61055182610526565b61055a81610dec565b61056483836113a6565b50505050565b6001600160a01b03811633146105935760405163334bd91960e11b815260040160405180910390fd5b61059d828261144b565b505050565b6105aa6114c7565b6105b38261156e565b6105bd8282611579565b5050565b60006105cb61163b565b5060008051602061285983398151915290565b60006105e981610dec565b6105f7856003548585611684565b6001546001600160a01b039081169086160361064057604051339084156108fc029085906000818181858888f1935050505015801561063a573d6000803e3d6000fd5b506106b3565b60405163a9059cbb60e01b8152336004820152602481018490526001600160a01b0385169063a9059cbb906044016020604051808303816000875af115801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b19190612526565b505b604080516001600160a01b0387168152602081018590529081018390527fe01d4a733cb0b7a41727e1953d897f19b615151ff9861c9fc205800481dacf739060600160405180910390a15050505050565b600061070f81610dec565b61071d8460035485856116f9565b604080516001600160a01b0386168152602081018590529081018390527f6bede034b368efac88a4cd28b60aac75bec57160af2185de376fa635b11feceb906060015b60405180910390a150505050565b6000918252600080516020612879833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156107eb5750825b90506000826001600160401b031660011480156108075750303b155b905081158015610815575080155b156108335760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561085d57845460ff60401b1916600160401b1785555b600080546001600160a01b0319166001600160a01b038b161790556108848b89898961173a565b60038a905583156108cf57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b600080856000036108fb57604080516000815260208101909152610917565b6040805160208101889052016040516020818303038152906040525b905060005b8551811015610997578186828151811061093857610938612543565b6020026020010151600001516001600160a01b031687838151811061095f5761095f612543565b60200260200101516020015160405160200161097d93929190612559565b60408051601f19818403018152919052915060010161091c565b5060005b8451811015610a3557818582815181106109b7576109b7612543565b6020026020010151600001516001600160a01b03168683815181106109de576109de612543565b6020026020010151602001518784815181106109fc576109fc612543565b602002602001015160400151604051602001610a1b9493929190612580565b60408051601f19818403018152919052915060010161099b565b5060005b8351811015610ab45781848281518110610a5557610a55612543565b6020026020010151600001516001600160a01b0316858381518110610a7c57610a7c612543565b602002602001015160200151604051602001610a9a93929190612559565b60408051601f198184030181529190529150600101610a39565b50805160209091012095945050505050565b610acf82610526565b610ad881610dec565b610564838361144b565b6000610aed81610dec565b6000829050306001600160a01b0316816001600160a01b031663d7f708036040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e91906125af565b6001600160a01b031614610b85576040516369fad3d560e11b815260040160405180910390fd5b6000836001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be991906125af565b9050806001600160a01b031663095ea7b3836001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5c91906125af565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260001960248201526044016020604051808303816000875af1158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce9190612526565b50806001600160a01b031663095ea7b3836001600160a01b03166321a92c446040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4091906125af565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260001960248201526044016020604051808303816000875af1158015610d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db29190612526565b506040516001600160a01b03851681527f3dd75e2398f3f43733be2a92283f289c653b2cbe3bd767c8747d8f0493db37e990602001610760565b610df681336118b9565b50565b610df6600354610e0a6000846118f2565b611a31565b60005b81518110156105bd57610e5f828281518110610e3057610e30612543565b602002602001015160000151838381518110610e4e57610e4e612543565b602002602001015160200151611aa5565b60015482516001600160a01b0390911690839083908110610e8257610e82612543565b6020026020010151600001516001600160a01b031603610f165760025482516001600160a01b039091169063d0e30db090849084908110610ec557610ec5612543565b6020026020010151602001516040518263ffffffff1660e01b81526004016000604051808303818588803b158015610efc57600080fd5b505af1158015610f10573d6000803e3d6000fd5b50505050505b600101610e12565b60006001815b8451811015611279576000858281518110610f4157610f41612543565b6020908102919091018101518051918101516040820151919350908260006001846110525760405163f1ea61e560e01b81526004810185905260009081906001600160a01b0386169063f1ea61e590602401600060405180830381865afa158015610fb0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fd891908101906125cc565b915091506000826001600160a01b031682604051610ff69190612658565b6000604051808303816000865af19150503d8060008114611033576040519150601f19603f3d011682016040523d82523d6000602084013e611038565b606091505b505090508061104a576000935060009b505b5050506111bb565b600285036111bb57604051632e1a7d4d60e01b8152600481018590526001600160a01b03841690632e1a7d4d906024016020604051808303816000875af19250505080156110bd575060408051601f3d908101601f191682019092526110ba91810190612674565b60015b61113a57600090506000985061113584846001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f91906125af565b8d611ab0565b6111bb565b8092508483146111b9576111b961115184876126a3565b856001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561118f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b391906125af565b8e611ab0565b505b6040518060800160405280846001600160a01b03168152602001846001600160a01b031663c1590cd76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112379190612674565b81526020018381526020018215158152508c898151811061125a5761125a612543565b6020026020010181905250878060010198505050505050505050610f24565b509392505050565b60005b825181101561059d5760008382815181106112a1576112a1612543565b602090810291909101015160015481519192506001600160a01b039182169116148015611332576002546020830151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d916112ff9160040190815260200190565b600060405180830381600087803b15801561131957600080fd5b505af115801561132d573d6000803e3d6000fd5b505050505b60008161133f578461134f565b84836020015161134f91906126b6565b90506113648360000151846020015183611b2f565b505050600101611284565b61059d6003547f010e13e50cb99b6b3c8270ec6e16acfccbe1164a629d74b43549567a77593aff6113a086866118f2565b84611b3d565b60006000805160206128798339815191526113c1848461076e565b611441576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556113f73390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610520565b6000915050610520565b6000600080516020612879833981519152611466848461076e565b15611441576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610520565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061154e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611542600080516020612859833981519152546001600160a01b031690565b6001600160a01b031614155b1561156c5760405163703e46dd60e11b815260040160405180910390fd5b565b60006105bd81610dec565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156115d3575060408051601f3d908101601f191682019092526115d091810190612674565b60015b61160057604051634c9c8ce360e01b81526001600160a01b03831660048201526024015b60405180910390fd5b600080516020612859833981519152811461163157604051632a87526960e21b8152600481018290526024016115f7565b61059d8383611bbd565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461156c5760405163703e46dd60e11b815260040160405180910390fd5b8115610564576040516357439c0b60e11b81526004810183905260248101849052604481018290526001600160a01b0385169063ae873816906064015b600060405180830381600087803b1580156116db57600080fd5b505af11580156116ef573d6000803e3d6000fd5b5050505050505050565b81156105645760405163262b3b3160e11b81526004810183905260248101849052604481018290526001600160a01b03851690634c567662906064016116c1565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b031660008115801561177f5750825b90506000826001600160401b0316600114801561179b5750303b155b9050811580156117a9575080155b156117c75760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156117f157845460ff60401b1916600160401b1785555b6117f9611c13565b611801611c13565b61180c60008a6113a6565b506118377fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4896113a6565b50600180546001600160a01b03808a166001600160a01b031992831617909255600280549289169290911691909117905583156118ae57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b6118c3828261076e565b6105bd5760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016115f7565b60608060008061190185611c1b565b9150915085600003611972576040805160028082526060820183529091602083019080368337019050509250818360008151811061194157611941612543565b602002602001018181525050808360018151811061196157611961612543565b602002602001018181525050611a27565b60008061197e88611c1b565b60408051600480825260a082019092529294509092506020820160808036833701905050945081856000815181106119b8576119b8612543565b60200260200101818152505080856001815181106119d8576119d8612543565b60200260200101818152505083856002815181106119f8576119f8612543565b6020026020010181815250508285600381518110611a1857611a18612543565b60200260200101818152505050505b5090949350505050565b60005460405162b2775760e61b81526001600160a01b0390911690632c9dd5c090611a629085908590600401612704565b6020604051808303816000875af1158015611a81573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059d9190612674565b6105bd823083611c45565b60005b8151811015610564576000828281518110611ad057611ad0612543565b60200260200101519050836001600160a01b031681600001516001600160a01b031603611b265784838381518110611b0a57611b0a612543565b6020026020010151602001818151611b2291906126a3565b9052505b50600101611ab3565b61059d836003548484611caa565b600054604051633e3aa6c560e01b81526001600160a01b0390911690633e3aa6c5908390611b7390889088908890600401612725565b604080518083038185885af1158015611b90573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611bb59190612744565b505050505050565b611bc682611d0e565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611c0b5761059d8282611d73565b6105bd611de9565b61156c611e08565b6000806001611c2c6080600261284c565b611c3691906126a3565b83169360809390931c92915050565b604051627b8a6760e11b8152600481018290526001600160a01b03838116602483015284169062f714ce90604401600060405180830381600087803b158015611c8d57600080fd5b505af1158015611ca1573d6000803e3d6000fd5b50505050505050565b811561056457604051631c57762b60e31b815260048101839052602481018490526001600160a01b0385169063e2bbb1589083906044016000604051808303818588803b158015611cfa57600080fd5b505af11580156118ae573d6000803e3d6000fd5b806001600160a01b03163b600003611d4457604051634c9c8ce360e01b81526001600160a01b03821660048201526024016115f7565b60008051602061285983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611d909190612658565b600060405180830381855af49150503d8060008114611dcb576040519150601f19603f3d011682016040523d82523d6000602084013e611dd0565b606091505b5091509150611de0858383611e51565b95945050505050565b341561156c5760405163b398979f60e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661156c57604051631afcd79f60e31b815260040160405180910390fd5b606082611e6657611e6182611eb0565b611ea9565b8151158015611e7d57506001600160a01b0384163b155b15611ea657604051639996b31560e01b81526001600160a01b03851660048201526024016115f7565b50805b9392505050565b805115611ec05780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715611f1157611f11611ed9565b60405290565b604051608081016001600160401b0381118282101715611f1157611f11611ed9565b604051601f8201601f191681016001600160401b0381118282101715611f6157611f61611ed9565b604052919050565b60006001600160401b03821115611f8257611f82611ed9565b5060051b60200190565b6001600160a01b0381168114610df657600080fd5b600082601f830112611fb257600080fd5b81356020611fc7611fc283611f69565b611f39565b82815260069290921b84018101918181019086841115611fe657600080fd5b8286015b8481101561202e57604081890312156120035760008081fd5b61200b611eef565b813561201681611f8c565b81528185013585820152835291830191604001611fea565b509695505050505050565b8015158114610df657600080fd5b600082601f83011261205857600080fd5b81356020612068611fc283611f69565b82815260079290921b8401810191818101908684111561208757600080fd5b8286015b8481101561202e57608081890312156120a45760008081fd5b6120ac611f17565b81356120b781611f8c565b81528185013585820152604080830135908201526060808301356120da81612039565b9082015283529183019160800161208b565b60008060008060008060c0878903121561210557600080fd5b8635955060208701356001600160401b038082111561212357600080fd5b61212f8a838b01611fa1565b9650604089013591508082111561214557600080fd5b6121518a838b01612047565b9550606089013591508082111561216757600080fd5b5061217489828a01611fa1565b9350506080870135915060a087013590509295509295509295565b6000602082840312156121a157600080fd5b81356001600160e01b031981168114611ea957600080fd5b6000602082840312156121cb57600080fd5b5035919050565b600080604083850312156121e557600080fd5b8235915060208301356121f781611f8c565b809150509250929050565b60006001600160401b0382111561221b5761221b611ed9565b50601f01601f191660200190565b6000806040838503121561223c57600080fd5b823561224781611f8c565b915060208301356001600160401b0381111561226257600080fd5b8301601f8101851361227357600080fd5b8035612281611fc282612202565b81815286602083850101111561229657600080fd5b816020840160208301376000602083830101528093505050509250929050565b600080600080608085870312156122cc57600080fd5b84356122d781611f8c565b935060208501356122e781611f8c565b93969395505050506040820135916060013590565b60008060006060848603121561231157600080fd5b833561231c81611f8c565b95602085013595506040909401359392505050565b60008060008060008060c0878903121561234a57600080fd5b863561235581611f8c565b955060208701359450604087013561236c81611f8c565b9350606087013561237c81611f8c565b9250608087013561238c81611f8c565b915060a087013561239c81611f8c565b809150509295509295509295565b60005b838110156123c55781810151838201526020016123ad565b50506000910152565b60208152600082518060208401526123ed8160408501602087016123aa565b601f01601f19169190910160400192915050565b6000806000806080858703121561241757600080fd5b8435935060208501356001600160401b038082111561243557600080fd5b61244188838901611fa1565b9450604087013591508082111561245757600080fd5b61246388838901612047565b9350606087013591508082111561247957600080fd5b5061248687828801611fa1565b91505092959194509250565b6000602082840312156124a457600080fd5b8135611ea981611f8c565b600060408083018584526020828186015281865180845260609350838701915082880160005b8281101561251757815180516001600160a01b0316855285810151868601528781015188860152860151151586850152608090930192908401906001016124d5565b50919998505050505050505050565b60006020828403121561253857600080fd5b8151611ea981612039565b634e487b7160e01b600052603260045260246000fd5b6000845161256b8184602089016123aa565b91909101928352506020820152604001919050565b60008551612592818460208a016123aa565b919091019384525060208301919091526040820152606001919050565b6000602082840312156125c157600080fd5b8151611ea981611f8c565b600080604083850312156125df57600080fd5b82516125ea81611f8c565b60208401519092506001600160401b0381111561260657600080fd5b8301601f8101851361261757600080fd5b8051612625611fc282612202565b81815286602083850101111561263a57600080fd5b61264b8260208301602086016123aa565b8093505050509250929050565b6000825161266a8184602087016123aa565b9190910192915050565b60006020828403121561268657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105205761052061268d565b808201808211156105205761052061268d565b600081518084526020808501945080840160005b838110156126f9578151875295820195908201906001016126dd565b509495945050505050565b82815260406020820152600061271d60408301846126c9565b949350505050565b838152826020820152606060408201526000611de060608301846126c9565b6000806040838503121561275757600080fd5b505080516020909101519092909150565b600181815b808511156127a35781600019048211156127895761278961268d565b8085161561279657918102915b93841c939080029061276d565b509250929050565b6000826127ba57506001610520565b816127c757506000610520565b81600181146127dd57600281146127e757612803565b6001915050610520565b60ff8411156127f8576127f861268d565b50506001821b610520565b5060208310610133831016604e8410600b8410161715612826575081810a610520565b6128308383612768565b80600019048211156128445761284461268d565b029392505050565b6000611ea983836127ab56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a2646970667358221220c012aa1b1d886c2ee0ec2c00392e64a6583bd892986439c7aa9f8a0321413b4564736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101225760003560e01c80638201801a116100a5578063a2dc2ab71161006c578063a2dc2ab714610320578063ad3cb1cc14610340578063b39941911461037e578063d547741f1461039e578063f2428621146103be578063f5c2c430146103de57005b80638201801a146102775780638f3281a41461029757806391d14854146102b7578063926d7d7f146102d7578063a217fddf1461030b57005b806339e730ab116100e957806339e730ab146101e15780634f1ef2861461021957806352d1902d1461022c5780635f1b6bee146102415780636e9cfef11461026157005b806301f9df0b1461012b57806301ffc9a714610153578063248a9ca3146101735780632f2ff15d146101a157806336568abe146101c157005b3661012957005b005b61013e6101393660046120ec565b6103f1565b60405190151581526020015b60405180910390f35b34801561015f57600080fd5b5061013e61016e36600461218f565b6104ef565b34801561017f57600080fd5b5061019361018e3660046121b9565b610526565b60405190815260200161014a565b3480156101ad57600080fd5b506101296101bc3660046121d2565b610548565b3480156101cd57600080fd5b506101296101dc3660046121d2565b61056a565b3480156101ed57600080fd5b50600054610201906001600160a01b031681565b6040516001600160a01b03909116815260200161014a565b610129610227366004612229565b6105a2565b34801561023857600080fd5b506101936105c1565b34801561024d57600080fd5b5061012961025c3660046122b6565b6105de565b34801561026d57600080fd5b5061019360035481565b34801561028357600080fd5b506101296102923660046122fc565b610704565b3480156102a357600080fd5b50600154610201906001600160a01b031681565b3480156102c357600080fd5b5061013e6102d23660046121d2565b61076e565b3480156102e357600080fd5b506101937fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b34801561031757600080fd5b50610193600081565b34801561032c57600080fd5b5061012961033b366004612331565b6107a6565b34801561034c57600080fd5b50610371604051806040016040528060058152602001640352e302e360dc1b81525081565b60405161014a91906123ce565b34801561038a57600080fd5b50610193610399366004612401565b6108dc565b3480156103aa57600080fd5b506101296103b93660046121d2565b610ac6565b3480156103ca57600080fd5b50600254610201906001600160a01b031681565b6101296103ec366004612492565b610ae2565b60007fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc461041d81610dec565b61043161042c898989896108dc565b610df9565b61043a87610e0f565b60006104468787610f1e565b90506104528686611281565b604080516000808252602082019092528161048f565b60408051808201909152600080825260208201528152602001906001900390816104685790505b5090506104a98a6104a36000848c866108dc565b8761136f565b7f640622c00eb8dd98d3184ad993595f70972d855fe160e4a6291b7a0bf04d33928a896040516104da9291906124af565b60405180910390a15098975050505050505050565b60006001600160e01b03198216637965db0b60e01b148061052057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000908152600080516020612879833981519152602052604090206001015490565b61055182610526565b61055a81610dec565b61056483836113a6565b50505050565b6001600160a01b03811633146105935760405163334bd91960e11b815260040160405180910390fd5b61059d828261144b565b505050565b6105aa6114c7565b6105b38261156e565b6105bd8282611579565b5050565b60006105cb61163b565b5060008051602061285983398151915290565b60006105e981610dec565b6105f7856003548585611684565b6001546001600160a01b039081169086160361064057604051339084156108fc029085906000818181858888f1935050505015801561063a573d6000803e3d6000fd5b506106b3565b60405163a9059cbb60e01b8152336004820152602481018490526001600160a01b0385169063a9059cbb906044016020604051808303816000875af115801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b19190612526565b505b604080516001600160a01b0387168152602081018590529081018390527fe01d4a733cb0b7a41727e1953d897f19b615151ff9861c9fc205800481dacf739060600160405180910390a15050505050565b600061070f81610dec565b61071d8460035485856116f9565b604080516001600160a01b0386168152602081018590529081018390527f6bede034b368efac88a4cd28b60aac75bec57160af2185de376fa635b11feceb906060015b60405180910390a150505050565b6000918252600080516020612879833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156107eb5750825b90506000826001600160401b031660011480156108075750303b155b905081158015610815575080155b156108335760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561085d57845460ff60401b1916600160401b1785555b600080546001600160a01b0319166001600160a01b038b161790556108848b89898961173a565b60038a905583156108cf57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b600080856000036108fb57604080516000815260208101909152610917565b6040805160208101889052016040516020818303038152906040525b905060005b8551811015610997578186828151811061093857610938612543565b6020026020010151600001516001600160a01b031687838151811061095f5761095f612543565b60200260200101516020015160405160200161097d93929190612559565b60408051601f19818403018152919052915060010161091c565b5060005b8451811015610a3557818582815181106109b7576109b7612543565b6020026020010151600001516001600160a01b03168683815181106109de576109de612543565b6020026020010151602001518784815181106109fc576109fc612543565b602002602001015160400151604051602001610a1b9493929190612580565b60408051601f19818403018152919052915060010161099b565b5060005b8351811015610ab45781848281518110610a5557610a55612543565b6020026020010151600001516001600160a01b0316858381518110610a7c57610a7c612543565b602002602001015160200151604051602001610a9a93929190612559565b60408051601f198184030181529190529150600101610a39565b50805160209091012095945050505050565b610acf82610526565b610ad881610dec565b610564838361144b565b6000610aed81610dec565b6000829050306001600160a01b0316816001600160a01b031663d7f708036040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e91906125af565b6001600160a01b031614610b85576040516369fad3d560e11b815260040160405180910390fd5b6000836001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be991906125af565b9050806001600160a01b031663095ea7b3836001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5c91906125af565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260001960248201526044016020604051808303816000875af1158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce9190612526565b50806001600160a01b031663095ea7b3836001600160a01b03166321a92c446040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4091906125af565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260001960248201526044016020604051808303816000875af1158015610d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db29190612526565b506040516001600160a01b03851681527f3dd75e2398f3f43733be2a92283f289c653b2cbe3bd767c8747d8f0493db37e990602001610760565b610df681336118b9565b50565b610df6600354610e0a6000846118f2565b611a31565b60005b81518110156105bd57610e5f828281518110610e3057610e30612543565b602002602001015160000151838381518110610e4e57610e4e612543565b602002602001015160200151611aa5565b60015482516001600160a01b0390911690839083908110610e8257610e82612543565b6020026020010151600001516001600160a01b031603610f165760025482516001600160a01b039091169063d0e30db090849084908110610ec557610ec5612543565b6020026020010151602001516040518263ffffffff1660e01b81526004016000604051808303818588803b158015610efc57600080fd5b505af1158015610f10573d6000803e3d6000fd5b50505050505b600101610e12565b60006001815b8451811015611279576000858281518110610f4157610f41612543565b6020908102919091018101518051918101516040820151919350908260006001846110525760405163f1ea61e560e01b81526004810185905260009081906001600160a01b0386169063f1ea61e590602401600060405180830381865afa158015610fb0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fd891908101906125cc565b915091506000826001600160a01b031682604051610ff69190612658565b6000604051808303816000865af19150503d8060008114611033576040519150601f19603f3d011682016040523d82523d6000602084013e611038565b606091505b505090508061104a576000935060009b505b5050506111bb565b600285036111bb57604051632e1a7d4d60e01b8152600481018590526001600160a01b03841690632e1a7d4d906024016020604051808303816000875af19250505080156110bd575060408051601f3d908101601f191682019092526110ba91810190612674565b60015b61113a57600090506000985061113584846001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f91906125af565b8d611ab0565b6111bb565b8092508483146111b9576111b961115184876126a3565b856001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561118f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b391906125af565b8e611ab0565b505b6040518060800160405280846001600160a01b03168152602001846001600160a01b031663c1590cd76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112379190612674565b81526020018381526020018215158152508c898151811061125a5761125a612543565b6020026020010181905250878060010198505050505050505050610f24565b509392505050565b60005b825181101561059d5760008382815181106112a1576112a1612543565b602090810291909101015160015481519192506001600160a01b039182169116148015611332576002546020830151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d916112ff9160040190815260200190565b600060405180830381600087803b15801561131957600080fd5b505af115801561132d573d6000803e3d6000fd5b505050505b60008161133f578461134f565b84836020015161134f91906126b6565b90506113648360000151846020015183611b2f565b505050600101611284565b61059d6003547f010e13e50cb99b6b3c8270ec6e16acfccbe1164a629d74b43549567a77593aff6113a086866118f2565b84611b3d565b60006000805160206128798339815191526113c1848461076e565b611441576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556113f73390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610520565b6000915050610520565b6000600080516020612879833981519152611466848461076e565b15611441576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610520565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061154e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611542600080516020612859833981519152546001600160a01b031690565b6001600160a01b031614155b1561156c5760405163703e46dd60e11b815260040160405180910390fd5b565b60006105bd81610dec565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156115d3575060408051601f3d908101601f191682019092526115d091810190612674565b60015b61160057604051634c9c8ce360e01b81526001600160a01b03831660048201526024015b60405180910390fd5b600080516020612859833981519152811461163157604051632a87526960e21b8152600481018290526024016115f7565b61059d8383611bbd565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461156c5760405163703e46dd60e11b815260040160405180910390fd5b8115610564576040516357439c0b60e11b81526004810183905260248101849052604481018290526001600160a01b0385169063ae873816906064015b600060405180830381600087803b1580156116db57600080fd5b505af11580156116ef573d6000803e3d6000fd5b5050505050505050565b81156105645760405163262b3b3160e11b81526004810183905260248101849052604481018290526001600160a01b03851690634c567662906064016116c1565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b031660008115801561177f5750825b90506000826001600160401b0316600114801561179b5750303b155b9050811580156117a9575080155b156117c75760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156117f157845460ff60401b1916600160401b1785555b6117f9611c13565b611801611c13565b61180c60008a6113a6565b506118377fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4896113a6565b50600180546001600160a01b03808a166001600160a01b031992831617909255600280549289169290911691909117905583156118ae57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b6118c3828261076e565b6105bd5760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016115f7565b60608060008061190185611c1b565b9150915085600003611972576040805160028082526060820183529091602083019080368337019050509250818360008151811061194157611941612543565b602002602001018181525050808360018151811061196157611961612543565b602002602001018181525050611a27565b60008061197e88611c1b565b60408051600480825260a082019092529294509092506020820160808036833701905050945081856000815181106119b8576119b8612543565b60200260200101818152505080856001815181106119d8576119d8612543565b60200260200101818152505083856002815181106119f8576119f8612543565b6020026020010181815250508285600381518110611a1857611a18612543565b60200260200101818152505050505b5090949350505050565b60005460405162b2775760e61b81526001600160a01b0390911690632c9dd5c090611a629085908590600401612704565b6020604051808303816000875af1158015611a81573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059d9190612674565b6105bd823083611c45565b60005b8151811015610564576000828281518110611ad057611ad0612543565b60200260200101519050836001600160a01b031681600001516001600160a01b031603611b265784838381518110611b0a57611b0a612543565b6020026020010151602001818151611b2291906126a3565b9052505b50600101611ab3565b61059d836003548484611caa565b600054604051633e3aa6c560e01b81526001600160a01b0390911690633e3aa6c5908390611b7390889088908890600401612725565b604080518083038185885af1158015611b90573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611bb59190612744565b505050505050565b611bc682611d0e565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611c0b5761059d8282611d73565b6105bd611de9565b61156c611e08565b6000806001611c2c6080600261284c565b611c3691906126a3565b83169360809390931c92915050565b604051627b8a6760e11b8152600481018290526001600160a01b03838116602483015284169062f714ce90604401600060405180830381600087803b158015611c8d57600080fd5b505af1158015611ca1573d6000803e3d6000fd5b50505050505050565b811561056457604051631c57762b60e31b815260048101839052602481018490526001600160a01b0385169063e2bbb1589083906044016000604051808303818588803b158015611cfa57600080fd5b505af11580156118ae573d6000803e3d6000fd5b806001600160a01b03163b600003611d4457604051634c9c8ce360e01b81526001600160a01b03821660048201526024016115f7565b60008051602061285983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611d909190612658565b600060405180830381855af49150503d8060008114611dcb576040519150601f19603f3d011682016040523d82523d6000602084013e611dd0565b606091505b5091509150611de0858383611e51565b95945050505050565b341561156c5760405163b398979f60e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661156c57604051631afcd79f60e31b815260040160405180910390fd5b606082611e6657611e6182611eb0565b611ea9565b8151158015611e7d57506001600160a01b0384163b155b15611ea657604051639996b31560e01b81526001600160a01b03851660048201526024016115f7565b50805b9392505050565b805115611ec05780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715611f1157611f11611ed9565b60405290565b604051608081016001600160401b0381118282101715611f1157611f11611ed9565b604051601f8201601f191681016001600160401b0381118282101715611f6157611f61611ed9565b604052919050565b60006001600160401b03821115611f8257611f82611ed9565b5060051b60200190565b6001600160a01b0381168114610df657600080fd5b600082601f830112611fb257600080fd5b81356020611fc7611fc283611f69565b611f39565b82815260069290921b84018101918181019086841115611fe657600080fd5b8286015b8481101561202e57604081890312156120035760008081fd5b61200b611eef565b813561201681611f8c565b81528185013585820152835291830191604001611fea565b509695505050505050565b8015158114610df657600080fd5b600082601f83011261205857600080fd5b81356020612068611fc283611f69565b82815260079290921b8401810191818101908684111561208757600080fd5b8286015b8481101561202e57608081890312156120a45760008081fd5b6120ac611f17565b81356120b781611f8c565b81528185013585820152604080830135908201526060808301356120da81612039565b9082015283529183019160800161208b565b60008060008060008060c0878903121561210557600080fd5b8635955060208701356001600160401b038082111561212357600080fd5b61212f8a838b01611fa1565b9650604089013591508082111561214557600080fd5b6121518a838b01612047565b9550606089013591508082111561216757600080fd5b5061217489828a01611fa1565b9350506080870135915060a087013590509295509295509295565b6000602082840312156121a157600080fd5b81356001600160e01b031981168114611ea957600080fd5b6000602082840312156121cb57600080fd5b5035919050565b600080604083850312156121e557600080fd5b8235915060208301356121f781611f8c565b809150509250929050565b60006001600160401b0382111561221b5761221b611ed9565b50601f01601f191660200190565b6000806040838503121561223c57600080fd5b823561224781611f8c565b915060208301356001600160401b0381111561226257600080fd5b8301601f8101851361227357600080fd5b8035612281611fc282612202565b81815286602083850101111561229657600080fd5b816020840160208301376000602083830101528093505050509250929050565b600080600080608085870312156122cc57600080fd5b84356122d781611f8c565b935060208501356122e781611f8c565b93969395505050506040820135916060013590565b60008060006060848603121561231157600080fd5b833561231c81611f8c565b95602085013595506040909401359392505050565b60008060008060008060c0878903121561234a57600080fd5b863561235581611f8c565b955060208701359450604087013561236c81611f8c565b9350606087013561237c81611f8c565b9250608087013561238c81611f8c565b915060a087013561239c81611f8c565b809150509295509295509295565b60005b838110156123c55781810151838201526020016123ad565b50506000910152565b60208152600082518060208401526123ed8160408501602087016123aa565b601f01601f19169190910160400192915050565b6000806000806080858703121561241757600080fd5b8435935060208501356001600160401b038082111561243557600080fd5b61244188838901611fa1565b9450604087013591508082111561245757600080fd5b61246388838901612047565b9350606087013591508082111561247957600080fd5b5061248687828801611fa1565b91505092959194509250565b6000602082840312156124a457600080fd5b8135611ea981611f8c565b600060408083018584526020828186015281865180845260609350838701915082880160005b8281101561251757815180516001600160a01b0316855285810151868601528781015188860152860151151586850152608090930192908401906001016124d5565b50919998505050505050505050565b60006020828403121561253857600080fd5b8151611ea981612039565b634e487b7160e01b600052603260045260246000fd5b6000845161256b8184602089016123aa565b91909101928352506020820152604001919050565b60008551612592818460208a016123aa565b919091019384525060208301919091526040820152606001919050565b6000602082840312156125c157600080fd5b8151611ea981611f8c565b600080604083850312156125df57600080fd5b82516125ea81611f8c565b60208401519092506001600160401b0381111561260657600080fd5b8301601f8101851361261757600080fd5b8051612625611fc282612202565b81815286602083850101111561263a57600080fd5b61264b8260208301602086016123aa565b8093505050509250929050565b6000825161266a8184602087016123aa565b9190910192915050565b60006020828403121561268657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105205761052061268d565b808201808211156105205761052061268d565b600081518084526020808501945080840160005b838110156126f9578151875295820195908201906001016126dd565b509495945050505050565b82815260406020820152600061271d60408301846126c9565b949350505050565b838152826020820152606060408201526000611de060608301846126c9565b6000806040838503121561275757600080fd5b505080516020909101519092909150565b600181815b808511156127a35781600019048211156127895761278961268d565b8085161561279657918102915b93841c939080029061276d565b509250929050565b6000826127ba57506001610520565b816127c757506000610520565b81600181146127dd57600281146127e757612803565b6001915050610520565b60ff8411156127f8576127f861268d565b50506001821b610520565b5060208310610133831016604e8410600b8410161715612826575081810a610520565b6128308383612768565b80600019048211156128445761284461268d565b029392505050565b6000611ea983836127ab56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a2646970667358221220c012aa1b1d886c2ee0ec2c00392e64a6583bd892986439c7aa9f8a0321413b4564736f6c63430008140033",
  "devdoc": {
    "author": "@nimbora 2024",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "BridgeCancelDepositRequestClaimed(address,uint256,uint256)": {
        "params": {
          "amount": "the amount to claim from the bridge.",
          "bridge": "the bridge address.",
          "nonce": "the deposit nonce."
        }
      },
      "CancelDepositRequestBridgeSent(address,uint256,uint256)": {
        "params": {
          "amount": "the amount to claim from the bridge.",
          "bridge": "the bridge address.",
          "nonce": "the deposit nonce."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ReportHandled(uint256,(address,uint256,uint256,bool)[])": {
        "params": {
          "epoch": "the report epoch.",
          "reports": "the list of  strategies updated."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "StrategyRegistered(address)": {
        "params": {
          "strategy": "the strategy address."
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "cancelDepositRequestBridge(address,uint256,uint256)": {
        "details": "Cancel the deposited tokens when they get stuck. If the fees paid to bridge the tokens are not enough to incentive the sequencer it's possible that the tokens will stay blocked. By calling this function the admin can claim back the tokens.",
        "params": {
          "_amount": "the amount deposited.",
          "_bridge": "the bridge address.",
          "_nonce": "the nonce of the deposit."
        }
      },
      "claimBridgeCancelDepositRequest(address,address,uint256,uint256)": {
        "details": "After calling the 'cancelDepositRequestBridge' the tokens are available after 7days, as this time is too long the admin will send the tokens to L2 and claim back the blocked tokens when they are released by calling this func.",
        "params": {
          "_amount": "the amount deposited.",
          "_bridge": "the bridge address.",
          "_nonce": "the nonce of the deposit.",
          "_token": "the token address."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "handleReport(uint256,(address,uint256)[],(address,uint256,uint256,bool)[],(address,uint256)[],uint256,uint256)": {
        "params": {
          "_bridgeDepositInfo": "a list of {bridgeAddress,amount} to deposit into the bridges, those values are computed on L2.",
          "_bridgeWithdrawInfo": "a list of {bridgeAddress,amount} to withdraw from the bridges.",
          "_epoch": "the epoch of the report.",
          "_l2BridgeEthFee": "the fees to pay for briding tokens to L2.",
          "_l2MessagingEthFee": "the fees to pay for briding message to L2.",
          "_strategyReport": "the strategy to apply, can be DEPOSIT, WITHDRAW, UPDATE."
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hashFromReport(uint256,(address,uint256)[],(address,uint256,uint256,bool)[],(address,uint256)[])": {
        "details": "Generates a hash from a strategy report and bridge interaction information, used for data verification and integrity checks."
      },
      "initialize(address,uint256,address,address,address,address)": {
        "params": {
          "_admin": "the admin address.",
          "_ethBridge": "the eth bridge address.",
          "_l2PoolingManager": "the l2 pooling manager address.",
          "_relayer": "the relayer address.",
          "_starknetCore": "the Starknet core contract, used to bridge messages.",
          "_wETH": "the weth address."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "registerStrategy(address)": {
        "params": {
          "_strategy": "the strategy address."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "Starknet Pooling manager contract.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BridgeCancelDepositRequestClaimed(address,uint256,uint256)": {
        "notice": "Emitted when the func 'cancelDepositRequestBridge' is called"
      },
      "CancelDepositRequestBridgeSent(address,uint256,uint256)": {
        "notice": "Emitted when the func 'cancelDepositRequestBridge' is called"
      },
      "ReportHandled(uint256,(address,uint256,uint256,bool)[])": {
        "notice": "Emitted when a report is handled."
      },
      "StrategyRegistered(address)": {
        "notice": "Emitted when a strategy is registred."
      }
    },
    "kind": "user",
    "methods": {
      "RELAYER_ROLE()": {
        "notice": "Relayer role."
      },
      "ethBridge()": {
        "notice": "ethBridge address."
      },
      "handleReport(uint256,(address,uint256)[],(address,uint256,uint256,bool)[],(address,uint256)[],uint256,uint256)": {
        "notice": "Handle a report."
      },
      "initialize(address,uint256,address,address,address,address)": {
        "notice": "Initialize the Starknet pooling manager contract."
      },
      "l2PoolingManager()": {
        "notice": "The L2 Pooling manager address."
      },
      "registerStrategy(address)": {
        "notice": "List a new strategy."
      },
      "starknetCore()": {
        "notice": "Starknet messaging interface."
      },
      "wETH()": {
        "notice": "wETH address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5124,
        "contract": "contracts/poolingManager/Implementation/StarknetPoolingManager.sol:StarknetPoolingManager",
        "label": "starknetCore",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IStarknetMessaging)4979"
      },
      {
        "astId": 7066,
        "contract": "contracts/poolingManager/Implementation/StarknetPoolingManager.sol:StarknetPoolingManager",
        "label": "ethBridge",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7069,
        "contract": "contracts/poolingManager/Implementation/StarknetPoolingManager.sol:StarknetPoolingManager",
        "label": "wETH",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6706,
        "contract": "contracts/poolingManager/Implementation/StarknetPoolingManager.sol:StarknetPoolingManager",
        "label": "l2PoolingManager",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IStarknetMessaging)4979": {
        "encoding": "inplace",
        "label": "contract IStarknetMessaging",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}