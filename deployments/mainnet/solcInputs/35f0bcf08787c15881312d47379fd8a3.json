{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IChainlinkAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\ninterface IChainlinkAggregator {\n    /**\n     * @notice Reads the current answer from aggregator delegated to.\n     */\n    function latestAnswer() external view returns (int256);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/IWstETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IWstETH {\n    /**\n     * @notice Get amount of stETH for a one wstETH\n     * @return Amount of stETH for 1 wstETH\n     */\n    function stEthPerToken() external view returns (uint256);\n}\n"
    },
    "contracts/pricefeed/wsteth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {IChainlinkAggregator} from \"../interfaces/IChainlinkAggregator.sol\";\nimport {IWstETH} from \"../interfaces/IWstETH.sol\";\n\n/// @title wstETH/ETH price feed compatible with AAVE feed interface.\n/// @dev Please notice that this feed doesn't provide the complete Chainlink feed interface.\ncontract AAVECompatWstETHToETHPriceFeed is IChainlinkAggregator {\n    IWstETH public immutable wstETH;\n    IChainlinkAggregator public immutable stETHToETHPriceFeed;\n\n    int256 internal constant PRECISION = 10 ** 18;\n\n    constructor(address _stETHToETHPriceFeed, address _wstETH) {\n        stETHToETHPriceFeed = IChainlinkAggregator(_stETHToETHPriceFeed);\n        wstETH = IWstETH(_wstETH);\n    }\n\n    /**\n     * @notice Get price of one wstETH expressed in ETH.\n     */\n    function latestAnswer() external view override returns (int256) {\n        int256 wstETHToStETH = int256(wstETH.stEthPerToken());\n        assert(wstETHToStETH > 0);\n        int256 stETHToETH = stETHToETHPriceFeed.latestAnswer();\n\n        return (wstETHToStETH * stETHToETH) / PRECISION;\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return (18);\n    }\n\n    /**\n     * @notice Revert all calls except the 'latestAnswer'\n     */\n    fallback() external {\n        revert(\"Unexpected function call.\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": false,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}